// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// This file will be automatically regenerated when your Next.js server is running.
/* eslint-disable */

// prettier-ignore
declare module "nextjs-routes" {
  export type Route =
    | StaticRoute<"/_Layout/ LinksGroup">
    | StaticRoute<"/_Layout/HocLayout">
    | StaticRoute<"/_Layout/MenuLinks">
    | StaticRoute<"/_Layout/ProfileTab">
    | StaticRoute<"/_Layout/SideMenu">
    | StaticRoute<"/_Layout/TabLayout">
    | StaticRoute<"/_Layout/UserHeader">
    | StaticRoute<"/_Layout/UserSection1">
    | StaticRoute<"/_Layout/WelcomeHeader">
    | StaticRoute<"/_Util/Constance">
    | StaticRoute<"/_blocks/AddSSHBlock">
    | StaticRoute<"/_blocks/ContactBlock">
    | StaticRoute<"/_blocks/EditSSHBlock">
    | StaticRoute<"/_blocks/GooglePayBlock">
    | StaticRoute<"/_blocks/MobileSecurityBlock">
    | StaticRoute<"/_blocks/PaymentHistory">
    | StaticRoute<"/_blocks/PaymentMethods">
    | StaticRoute<"/_blocks/PaypalBlock">
    | StaticRoute<"/_blocks/ProfileSecurityBlock">
    | StaticRoute<"/_blocks/SMSMessageBlock">
    | StaticRoute<"/_blocks/SelectProduct">
    | StaticRoute<"/_blocks/SocialAuthencation">
    | StaticRoute<"/_blocks/StripePaymentBlock">
    | StaticRoute<"/_blocks/StripePaymentForm2">
    | StaticRoute<"/_blocks/TeamMemberTableBlock">
    | StaticRoute<"/account/billing">
    | StaticRoute<"/account">
    | StaticRoute<"/account/logout">
    | StaticRoute<"/account/maintenance">
    | StaticRoute<"/account/service-transfer">
    | StaticRoute<"/account/settings">
    | StaticRoute<"/account/teams">
    | StaticRoute<"/activate">
    | StaticRoute<"/api/create-payment-intent">
    | StaticRoute<"/api/github/callback">
    | StaticRoute<"/api/github">
    | StaticRoute<"/api/google/callback">
    | StaticRoute<"/api/google">
    | StaticRoute<"/api/invoice/_c/general">
    | StaticRoute<"/api/invoice/_c/vmInvoice">
    | StaticRoute<"/api/invoice">
    | DynamicRoute<"/api/trpc/[trpc]", { "trpc": string }>
    | DynamicRoute<"/domains/details/[id]", { "id": string }>
    | StaticRoute<"/domains/details/_Unit/DNSManagement">
    | StaticRoute<"/domains/details/_Unit/DetailBlock">
    | StaticRoute<"/domains/details/_Unit/TransferBlock">
    | StaticRoute<"/domains/details/_Unit/WhoisBlock">
    | StaticRoute<"/domains/details/_UnitComponent/EditNSRecords">
    | StaticRoute<"/domains/details/_UnitComponent/NsManageUnit">
    | StaticRoute<"/domains">
    | StaticRoute<"/email">
    | DynamicRoute<"/hosting/details/[id]", { "id": string }>
    | StaticRoute<"/hosting/details/_Blocks/PanelComponents">
    | StaticRoute<"/hosting/details/_Blocks/PanelSession">
    | StaticRoute<"/hosting/details/_Blocks/PasswordComponent">
    | StaticRoute<"/hosting">
    | StaticRoute<"/">
    | StaticRoute<"/instances/_Component/CheckoutForm">
    | StaticRoute<"/instances/_Component/HostnameListBox">
    | StaticRoute<"/instances/_Component/MiniSection">
    | StaticRoute<"/instances/_Component/MiniSectionConfirm">
    | StaticRoute<"/instances/_Component/MoreNodeButton">
    | StaticRoute<"/instances/_Component/OSImages">
    | StaticRoute<"/instances/_Component/PasswordInput">
    | StaticRoute<"/instances/_Component/PaymentOptions">
    | StaticRoute<"/instances/_Component/PaystackButtonAction">
    | StaticRoute<"/instances/_Component/ProductSlider">
    | StaticRoute<"/instances/_Component/Regions">
    | StaticRoute<"/instances/_Component/SSHKeyBox">
    | StaticRoute<"/instances/_Component/SaveCards">
    | StaticRoute<"/instances/_Component/Stepper">
    | StaticRoute<"/instances/_Component/VmAuthBox">
    | DynamicRoute<"/instances/console/[id]", { "id": string }>
    | StaticRoute<"/instances/console/_Component/TerminalConsole">
    | DynamicRoute<"/instances/firewall/[id]", { "id": string }>
    | StaticRoute<"/instances/firewall/_Component/AddBlock">
    | StaticRoute<"/instances/firewall/_Component/DeleteButton">
    | StaticRoute<"/instances/firewall/_Component/EditBlock">
    | StaticRoute<"/instances">
    | DynamicRoute<"/instances/node/[id]", { "id": string }>
    | StaticRoute<"/instances/node/_Block/MyLocControl">
    | StaticRoute<"/instances/node/_Block/SelfPanelControl">
    | StaticRoute<"/instances/node/_Component/CPUGraphBlock">
    | StaticRoute<"/instances/node/_Component/ChangeHostname">
    | StaticRoute<"/instances/node/_Component/MemoryUsageGraph">
    | StaticRoute<"/instances/node/_Component/StatBlock">
    | StaticRoute<"/instances/node/_Component/StatusBadge">
    | StaticRoute<"/instances/node/_Component/TerminalComponent">
    | StaticRoute<"/instances/node/_Component/VmPassword">
    | StaticRoute<"/instances/payment/completed">
    | StaticRoute<"/instances/payment">
    | StaticRoute<"/instances/provision">
    | StaticRoute<"/login">
    | StaticRoute<"/mobile-verify">
    | StaticRoute<"/order/Component/BillingAddress">
    | StaticRoute<"/order/Component/CartHeader">
    | StaticRoute<"/order/Component/CartPReview">
    | StaticRoute<"/order/Component/CheckboxCard">
    | StaticRoute<"/order/Component/CheckoutForm">
    | StaticRoute<"/order/Component/DisplamerModal">
    | StaticRoute<"/order/Component/DomainListItem">
    | StaticRoute<"/order/Component/HeaderOrder">
    | StaticRoute<"/order/Component/ImageCheckboxes">
    | StaticRoute<"/order/Component/MiniBoxCardSummary">
    | StaticRoute<"/order/Component/MiniDomainSearch">
    | StaticRoute<"/order/Component/OrderTab">
    | StaticRoute<"/order/Component/PackageBox">
    | StaticRoute<"/order/Component/PaymentOptions">
    | StaticRoute<"/order/Component/PaystackButtonAction">
    | StaticRoute<"/order/Component/PricingBox">
    | StaticRoute<"/order/Component/ProductBox">
    | StaticRoute<"/order/Component/SSLCheckBox">
    | StaticRoute<"/order/Component/SaveCards">
    | StaticRoute<"/order/Component/SuccessMessage">
    | StaticRoute<"/order/Component/SummaryPayment">
    | StaticRoute<"/order/completed">
    | StaticRoute<"/order/domain">
    | StaticRoute<"/order/payment">
    | StaticRoute<"/order/summary">
    | StaticRoute<"/order/webcloud">
    | StaticRoute<"/profile/api">
    | StaticRoute<"/profile/authentication">
    | StaticRoute<"/profile">
    | StaticRoute<"/profile/information">
    | StaticRoute<"/profile/referrals">
    | StaticRoute<"/profile/settings">
    | StaticRoute<"/profile/ssh-keys">
    | StaticRoute<"/register">
    | StaticRoute<"/site-protection">
    | StaticRoute<"/welcome/billing">
    | StaticRoute<"/welcome">;

  interface StaticRoute<Pathname> {
    pathname: Pathname;
    query?: Query | undefined;
    hash?: string | null | undefined;
  }

  interface DynamicRoute<Pathname, Parameters> {
    pathname: Pathname;
    query: Parameters & Query;
    hash?: string | null | undefined;
  }

  interface Query {
    [key: string]: string | string[] | undefined;
  };

  export type RoutedQuery<P extends Route["pathname"]> = Extract<
    Route,
    { pathname: P }
  >["query"];

  export type Locale = undefined;

  /**
   * A typesafe utility function for generating paths in your application.
   *
   * route({ pathname: "/foos/[foo]", query: { foo: "bar" }}) will produce "/foos/bar".
   */
  export declare function route(r: Route): string;
}

// prettier-ignore
declare module "next/link" {
  import type { Route } from "nextjs-routes";
  import type { LinkProps as NextLinkProps } from "next/dist/client/link";
  import type {
    AnchorHTMLAttributes,
    DetailedReactHTMLElement,
    MouseEventHandler,
    PropsWithChildren,
  } from "react";
  export * from "next/dist/client/link";

  type Query = { query?: { [key: string]: string | string[] | undefined } };
  type StaticRoute = Exclude<Route, { query: any }>["pathname"];

  export interface LinkProps<
    Href extends Route | StaticRoute | Query = Route | StaticRoute | Query
  >
    extends Omit<NextLinkProps, "href" | "locale">,
      AnchorHTMLAttributes<HTMLAnchorElement> {
    href: Href;
    locale?: false;
  }

  type LinkReactElement = DetailedReactHTMLElement<
    {
      onMouseEnter?: MouseEventHandler<Element> | undefined;
      onClick: MouseEventHandler;
      href?: string | undefined;
      ref?: any;
    },
    HTMLElement
  >;

  declare function Link(
    props: PropsWithChildren<LinkProps<Route>>
  ): LinkReactElement;
  declare function Link(
    props: PropsWithChildren<LinkProps<StaticRoute>>
  ): LinkReactElement;
  declare function Link(
    props: PropsWithChildren<LinkProps<Query>>
  ): LinkReactElement;

  export default Link;
}

// prettier-ignore
declare module "next/router" {
  import type { Locale, Route, RoutedQuery } from "nextjs-routes";
  import type { NextRouter as Router } from "next/dist/client/router";
  export * from "next/dist/client/router";
  export { default } from "next/dist/client/router";

  type NextTransitionOptions = NonNullable<Parameters<Router["push"]>[2]>;
  type StaticRoute = Exclude<Route, { query: any }>["pathname"];

  interface TransitionOptions extends Omit<NextTransitionOptions, "locale"> {
    locale?: false;
  }

  export type NextRouter<P extends Route["pathname"] = Route["pathname"]> =
    Extract<Route, { pathname: P }> &
      Omit<
        Router,
        | "push"
        | "replace"
        | "locale"
        | "locales"
        | "defaultLocale"
        | "domainLocales"
      > & {
        defaultLocale?: undefined;
        domainLocales?: undefined;
        locale?: Locale;
        locales?: undefined;
        push(
          url: Route,
          as?: string,
          options?: TransitionOptions
        ): Promise<boolean>;
        push(
          url: StaticRoute,
          as?: string,
          options?: TransitionOptions
        ): Promise<boolean>;
        push(
          url: { query?: { [key: string]: string | string[] | undefined } },
          as?: string,
          options?: TransitionOptions
        ): Promise<boolean>;
        replace(
          url: Route,
          as?: string,
          options?: TransitionOptions
        ): Promise<boolean>;
        replace(
          url: StaticRoute,
          as?: string,
          options?: TransitionOptions
        ): Promise<boolean>;
        replace(
          url: { query?: { [key: string]: string | string[] | undefined } },
          as?: string,
          options?: TransitionOptions
        ): Promise<boolean>;
        route: P;
      };

  export function useRouter<P extends Route["pathname"]>(): NextRouter<P>;
}
